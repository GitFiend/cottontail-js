import {CSSProperties} from '../../jsx-types'

export function setStyles(element: HTMLElement, styles: CSSProperties) {
  for (const style in styles) {
    const value = (styles as any)[style]

    setStyle(element, style, value)
  }
}

export function updateStyles(
  element: HTMLElement,
  oldStyles: CSSProperties,
  newStyles: CSSProperties,
) {
  for (const style in newStyles) {
    const oldValue = (oldStyles as any)[style]
    const newValue = (newStyles as any)[style]

    if (newValue === undefined) continue

    if (oldValue === undefined) {
      setStyle(element, style, newValue)
    } else if (oldValue !== newValue) {
      setStyle(element, style, newValue)
    }
  }

  for (const style in oldStyles) {
    const oldValue = (oldStyles as any)[style]
    const newValue = (newStyles as any)[style]

    if (newValue === undefined && oldValue !== undefined) {
      // setStyle(element, style, '')
      element.style[style as any] = ''
    }
  }
}

function setStyle(element: HTMLElement, style: string, value: any) {
  if (typeof value === 'number' && isPixValue(style)) {
    element.style[style as any] = value + 'px'
  } else {
    element.style[style as any] = value
  }
}

function isPixValue(styleName: string): boolean {
  // Generated by co-pilot, so beware.
  switch (styleName) {
    case 'width':
    case 'minWidth':
    case 'maxWidth':
    case 'height':
    case 'minHeight':
    case 'maxHeight':
    case 'top':
    case 'left':
    case 'right':
    case 'bottom':
    case 'fontSize':
    case 'borderWidth':
    case 'borderRadius':
    case 'padding':
    case 'paddingTop':
    case 'paddingLeft':
    case 'paddingRight':
    case 'paddingBottom':
    case 'gap':
    case 'margin':
    case 'marginTop':
    case 'marginLeft':
    case 'marginRight':
    case 'marginBottom':
    case 'lineHeight':
    case 'letterSpacing':
    case 'strokeWidth':
    case 'outlineWidth':
    case 'outlineOffset':
    case 'strokeDashoffset':
    case 'strokeDasharray':
    case 'borderTopWidth':
    case 'borderLeftWidth':
    case 'borderRightWidth':
    case 'borderBottomWidth':
    case 'borderTopLeftRadius':
    case 'borderTopRightRadius':
    case 'borderBottomLeftRadius':
    case 'borderBottomRightRadius':
      return true
    default:
      return false
  }
}
